# -*- coding: utf-8 -*-
"""Face Mask Detection...ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XsUfdIzqNbxY9KNpsqd-hzQ0Q4EiJ_kc

Get dataset from kaggle
"""

!pip install kaggle

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d aneerbanchakraborty/face-mask-detection-data

from zipfile import ZipFile
dataset='/content/face-mask-detection-data.zip'
with ZipFile(dataset,'r') as zip:
  zip.extractall()
  print('the dataset is extracted')

"""Import librares"""

import os
import cv2
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as plimg
from sklearn.model_selection import train_test_split
from google.colab.patches import cv2_imshow
from PIL import Image

mask=os.listdir('/content/with_mask')
print(mask[0:6])
print(mask[-6:])

no_mask=os.listdir('/content/without_mask')
print(no_mask[0:6])
print(no_mask[-6:])

print('number of with mask images',len(mask))
print('number of without mask images',len(no_mask))

mask_lables=[1]*1915
no_mask_lables=[0]*1918
print(mask_lables[0:5])
print(no_mask_lables[0:5])

print(len(mask_lables))
print(len(no_mask_lables))

lables=mask_lables+no_mask_lables
print(len(lables))
print(lables[0:7])
print(lables[-6:])

"""Plotting the image"""

#plotting with mask
img=plimg.imread('/content/with_mask/image1,008.jpg')
plotting_image=plt.imshow(img)
plt.show()

#plotting no mask
img=plimg.imread('/content/without_mask/Faceimg1,014.jpg')
plotting_image=plt.imshow(img)
plt.show()

"""List of converted Images"""

mask_path='/content/with_mask/'
All=[]
for img_file in mask:
  image=Image.open(mask_path+img_file)
  image=image.resize((128,128))
  image=image.convert('RGB')
  image=np.array(image)
  All.append(image)

no_mask_path='/content/without_mask/'
for img_file in no_mask:
  image=Image.open(no_mask_path+img_file)
  image=image.resize((128,128))
  image=image.convert('RGB')
  image=np.array(image)
  All.append(image)

print(type(All))
print (len(All))
print(All[0])

print(type(All[0]))
print(All[0].shape)
print(type(All))
print(type(lables))

"""Convert list to numpy Arr"""

X=np.array(All)
Y=np.array(lables)
print(type(X))
print(type(Y))
print('x shape is',X.shape)
print('y shape is',Y.shape)
print(X)
print(Y)

print(X.shape)
print(Y.shape)

"""Splitting the data"""

#X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2)
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)

print(X.shape,X_train.shape,X_test.shape)

"""Scale the data"""

X_train_scale=X_train/255
X_test_scale=X_test/255

X_train[0]

X_train_scale[0]

"""CNN building"""

import tensorflow as tf
from tensorflow import keras

classes=2
model= keras.Sequential()

model.add(keras.layers.Conv2D(32,kernel_size=(3,3),activation='relu',input_shape=(128,128,3)))
model.add(keras.layers.MaxPool2D(pool_size=(2,2)))

model.add(keras.layers.Conv2D(32,kernel_size=(3,3),activation='relu'))
model.add(keras.layers.MaxPool2D(pool_size=(2,2)))

model.add(keras.layers.Flatten())

model.add(keras.layers.Dense(128,activation='relu'))
model.add(keras.layers.Dropout(0.5))

model.add(keras.layers.Dense(64,activation='relu'))
model.add(keras.layers.Dropout(0.5))

model.add(keras.layers.Dense(classes,activation='sigmoid'))

"""Compile CNN"""

model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])

"""Train CNN"""

#history=model.fit(X_train_scale,Y_train,validation_split=0.1,epochs=5)
history = model.fit(X_train_scale, Y_train, validation_split=0.1, epochs=10)

"""Model Evaluation"""

loss,accuracy=model.evaluate(X_test_scale,Y_test)
print('Accuracy Test',accuracy)

"""Prediction

"""

#!curl -o logo.png https://colab.research.google.com/img/colab_favicon_256px.png
import cv2
input_img = cv2.imread('/content/download.jpg', cv2.IMREAD_UNCHANGED)
cv2_imshow(input_img)

input_img_resize=cv2.resize(input_img,(128,128))
input_img_scale=input_img_resize/255
input_img_reshape=np.reshape(input_img_scale,[1,128,128,3])
input_prediction=model.predict(input_img_reshape)


if input_prediction_lable ==1:
  print('wearing mask')
else:
  print('not wearing mask')

#!curl -o logo.png https://colab.research.google.com/img/colab_favicon_256px.png
import cv2
input_img = cv2.imread('/content/OIP (2).jpg', cv2.IMREAD_UNCHANGED)
cv2_imshow(input_img)

input_img_resize=cv2.resize(input_img,(128,128))
input_img_scale=input_img_resize/255
input_img_reshape=np.reshape(input_img_scale,[1,128,128,3])
input_prediction=model.predict(input_img_reshape)

if input_prediction_lable ==0:
  print('wearing mask')
else:
  print('not wearing mask')